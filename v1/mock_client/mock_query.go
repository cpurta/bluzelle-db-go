// Code generated by MockGen. DO NOT EDIT.
// Source: ./query.go

// Package mock_client is a generated GoMock package.
package mock_client

import (
	context "context"
	reflect "reflect"

	types "github.com/cpurta/bluzelle-db-go/types"
	gomock "github.com/golang/mock/gomock"
)

// MockQueryClient is a mock of QueryClient interface.
type MockQueryClient struct {
	ctrl     *gomock.Controller
	recorder *MockQueryClientMockRecorder
}

// MockQueryClientMockRecorder is the mock recorder for MockQueryClient.
type MockQueryClientMockRecorder struct {
	mock *MockQueryClient
}

// NewMockQueryClient creates a new mock instance.
func NewMockQueryClient(ctrl *gomock.Controller) *MockQueryClient {
	mock := &MockQueryClient{ctrl: ctrl}
	mock.recorder = &MockQueryClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueryClient) EXPECT() *MockQueryClientMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockQueryClient) Count(ctx context.Context, uuid string) (*types.QueryCountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, uuid)
	ret0, _ := ret[0].(*types.QueryCountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockQueryClientMockRecorder) Count(ctx, uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockQueryClient)(nil).Count), ctx, uuid)
}

// GetLease mocks base method.
func (m *MockQueryClient) GetLease(ctx context.Context, uuid, key string) (*types.QueryGetLeaseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLease", ctx, uuid, key)
	ret0, _ := ret[0].(*types.QueryGetLeaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLease indicates an expected call of GetLease.
func (mr *MockQueryClientMockRecorder) GetLease(ctx, uuid, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLease", reflect.TypeOf((*MockQueryClient)(nil).GetLease), ctx, uuid, key)
}

// GetNShortestLeases mocks base method.
func (m *MockQueryClient) GetNShortestLeases(ctx context.Context, uuid string, number int) (*types.QueryGetNShortestLeasesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNShortestLeases", ctx, uuid, number)
	ret0, _ := ret[0].(*types.QueryGetNShortestLeasesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNShortestLeases indicates an expected call of GetNShortestLeases.
func (mr *MockQueryClientMockRecorder) GetNShortestLeases(ctx, uuid, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNShortestLeases", reflect.TypeOf((*MockQueryClient)(nil).GetNShortestLeases), ctx, uuid, number)
}

// Has mocks base method.
func (m *MockQueryClient) Has(ctx context.Context, uuid, key string) (*types.QueryHasResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", ctx, uuid, key)
	ret0, _ := ret[0].(*types.QueryHasResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Has indicates an expected call of Has.
func (mr *MockQueryClientMockRecorder) Has(ctx, uuid, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockQueryClient)(nil).Has), ctx, uuid, key)
}

// KeyValues mocks base method.
func (m *MockQueryClient) KeyValues(ctx context.Context, uuid, startKey string, limit int64) (*types.QueryKeyValuesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KeyValues", ctx, uuid, startKey, limit)
	ret0, _ := ret[0].(*types.QueryKeyValuesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KeyValues indicates an expected call of KeyValues.
func (mr *MockQueryClientMockRecorder) KeyValues(ctx, uuid, startKey, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeyValues", reflect.TypeOf((*MockQueryClient)(nil).KeyValues), ctx, uuid, startKey, limit)
}

// Keys mocks base method.
func (m *MockQueryClient) Keys(ctx context.Context, uuid, startKey string, limit int64) (*types.QueryKeysResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Keys", ctx, uuid, startKey, limit)
	ret0, _ := ret[0].(*types.QueryKeysResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Keys indicates an expected call of Keys.
func (mr *MockQueryClientMockRecorder) Keys(ctx, uuid, startKey, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockQueryClient)(nil).Keys), ctx, uuid, startKey, limit)
}

// MyKeys mocks base method.
func (m *MockQueryClient) MyKeys(ctx context.Context, uuid, address, startKey string, limit int64) (*types.QueryMyKeysResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MyKeys", ctx, uuid, address, startKey, limit)
	ret0, _ := ret[0].(*types.QueryMyKeysResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MyKeys indicates an expected call of MyKeys.
func (mr *MockQueryClientMockRecorder) MyKeys(ctx, uuid, address, startKey, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MyKeys", reflect.TypeOf((*MockQueryClient)(nil).MyKeys), ctx, uuid, address, startKey, limit)
}

// Read mocks base method.
func (m *MockQueryClient) Read(ctx context.Context, uuid, key string) (*types.QueryReadResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", ctx, uuid, key)
	ret0, _ := ret[0].(*types.QueryReadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockQueryClientMockRecorder) Read(ctx, uuid, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockQueryClient)(nil).Read), ctx, uuid, key)
}

// Search mocks base method.
func (m *MockQueryClient) Search(ctx context.Context, uuid, searchString, startKey string, limit int64) (*types.QuerySearchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, uuid, searchString, startKey, limit)
	ret0, _ := ret[0].(*types.QuerySearchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockQueryClientMockRecorder) Search(ctx, uuid, searchString, startKey, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockQueryClient)(nil).Search), ctx, uuid, searchString, startKey, limit)
}
