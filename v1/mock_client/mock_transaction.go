// Code generated by MockGen. DO NOT EDIT.
// Source: ./transaction.go

// Package mock_client is a generated GoMock package.
package mock_client

import (
	context "context"
	reflect "reflect"

	types "github.com/cpurta/bluzelle-db-go/types"
	bluzelledbgo "github.com/cpurta/bluzelle-db-go/v1"
	gomock "github.com/golang/mock/gomock"
)

// MockTransactionClient is a mock of TransactionClient interface.
type MockTransactionClient struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionClientMockRecorder
}

// MockTransactionClientMockRecorder is the mock recorder for MockTransactionClient.
type MockTransactionClientMockRecorder struct {
	mock *MockTransactionClient
}

// NewMockTransactionClient creates a new mock instance.
func NewMockTransactionClient(ctrl *gomock.Controller) *MockTransactionClient {
	mock := &MockTransactionClient{ctrl: ctrl}
	mock.recorder = &MockTransactionClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionClient) EXPECT() *MockTransactionClientMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTransactionClient) Create(ctx context.Context, create *types.MsgCreate) (*types.MsgCreateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, create)
	ret0, _ := ret[0].(*types.MsgCreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockTransactionClientMockRecorder) Create(ctx, create interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTransactionClient)(nil).Create), ctx, create)
}

// Delete mocks base method.
func (m *MockTransactionClient) Delete(ctx context.Context, delete *types.MsgDelete) (*types.MsgDeleteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, delete)
	ret0, _ := ret[0].(*types.MsgDeleteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockTransactionClientMockRecorder) Delete(ctx, delete interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTransactionClient)(nil).Delete), ctx, delete)
}

// DeleteAll mocks base method.
func (m *MockTransactionClient) DeleteAll(ctx context.Context, deleteAll *types.MsgDeleteAll) (*types.MsgDeleteAllResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll", ctx, deleteAll)
	ret0, _ := ret[0].(*types.MsgDeleteAllResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockTransactionClientMockRecorder) DeleteAll(ctx, deleteAll interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockTransactionClient)(nil).DeleteAll), ctx, deleteAll)
}

// MultiUpdate mocks base method.
func (m *MockTransactionClient) MultiUpdate(ctx context.Context, multiUpdate *types.MsgMultiUpdate) (*types.MsgMultiUpdateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MultiUpdate", ctx, multiUpdate)
	ret0, _ := ret[0].(*types.MsgMultiUpdateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MultiUpdate indicates an expected call of MultiUpdate.
func (mr *MockTransactionClientMockRecorder) MultiUpdate(ctx, multiUpdate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultiUpdate", reflect.TypeOf((*MockTransactionClient)(nil).MultiUpdate), ctx, multiUpdate)
}

// NewTransactionCreate mocks base method.
func (m *MockTransactionClient) NewTransactionCreate(create *types.MsgCreate) bluzelledbgo.TransactionOperation {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewTransactionCreate", create)
	ret0, _ := ret[0].(bluzelledbgo.TransactionOperation)
	return ret0
}

// NewTransactionCreate indicates an expected call of NewTransactionCreate.
func (mr *MockTransactionClientMockRecorder) NewTransactionCreate(create interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewTransactionCreate", reflect.TypeOf((*MockTransactionClient)(nil).NewTransactionCreate), create)
}

// NewTransactionDelete mocks base method.
func (m *MockTransactionClient) NewTransactionDelete(delete *types.MsgDelete) bluzelledbgo.TransactionOperation {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewTransactionDelete", delete)
	ret0, _ := ret[0].(bluzelledbgo.TransactionOperation)
	return ret0
}

// NewTransactionDelete indicates an expected call of NewTransactionDelete.
func (mr *MockTransactionClientMockRecorder) NewTransactionDelete(delete interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewTransactionDelete", reflect.TypeOf((*MockTransactionClient)(nil).NewTransactionDelete), delete)
}

// NewTransactionDeleteAll mocks base method.
func (m *MockTransactionClient) NewTransactionDeleteAll(deleteAll *types.MsgDeleteAll) bluzelledbgo.TransactionOperation {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewTransactionDeleteAll", deleteAll)
	ret0, _ := ret[0].(bluzelledbgo.TransactionOperation)
	return ret0
}

// NewTransactionDeleteAll indicates an expected call of NewTransactionDeleteAll.
func (mr *MockTransactionClientMockRecorder) NewTransactionDeleteAll(deleteAll interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewTransactionDeleteAll", reflect.TypeOf((*MockTransactionClient)(nil).NewTransactionDeleteAll), deleteAll)
}

// NewTransactionMultiUpdate mocks base method.
func (m *MockTransactionClient) NewTransactionMultiUpdate(multiUpdate *types.MsgMultiUpdate) bluzelledbgo.TransactionOperation {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewTransactionMultiUpdate", multiUpdate)
	ret0, _ := ret[0].(bluzelledbgo.TransactionOperation)
	return ret0
}

// NewTransactionMultiUpdate indicates an expected call of NewTransactionMultiUpdate.
func (mr *MockTransactionClientMockRecorder) NewTransactionMultiUpdate(multiUpdate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewTransactionMultiUpdate", reflect.TypeOf((*MockTransactionClient)(nil).NewTransactionMultiUpdate), multiUpdate)
}

// NewTransactionRename mocks base method.
func (m *MockTransactionClient) NewTransactionRename(rename *types.MsgRename) bluzelledbgo.TransactionOperation {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewTransactionRename", rename)
	ret0, _ := ret[0].(bluzelledbgo.TransactionOperation)
	return ret0
}

// NewTransactionRename indicates an expected call of NewTransactionRename.
func (mr *MockTransactionClientMockRecorder) NewTransactionRename(rename interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewTransactionRename", reflect.TypeOf((*MockTransactionClient)(nil).NewTransactionRename), rename)
}

// NewTransactionRenewLease mocks base method.
func (m *MockTransactionClient) NewTransactionRenewLease(renewLease *types.MsgRenewLease) bluzelledbgo.TransactionOperation {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewTransactionRenewLease", renewLease)
	ret0, _ := ret[0].(bluzelledbgo.TransactionOperation)
	return ret0
}

// NewTransactionRenewLease indicates an expected call of NewTransactionRenewLease.
func (mr *MockTransactionClientMockRecorder) NewTransactionRenewLease(renewLease interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewTransactionRenewLease", reflect.TypeOf((*MockTransactionClient)(nil).NewTransactionRenewLease), renewLease)
}

// NewTransactionRenewLeasesAll mocks base method.
func (m *MockTransactionClient) NewTransactionRenewLeasesAll(renewLeasesAll *types.MsgRenewLeasesAll) bluzelledbgo.TransactionOperation {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewTransactionRenewLeasesAll", renewLeasesAll)
	ret0, _ := ret[0].(bluzelledbgo.TransactionOperation)
	return ret0
}

// NewTransactionRenewLeasesAll indicates an expected call of NewTransactionRenewLeasesAll.
func (mr *MockTransactionClientMockRecorder) NewTransactionRenewLeasesAll(renewLeasesAll interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewTransactionRenewLeasesAll", reflect.TypeOf((*MockTransactionClient)(nil).NewTransactionRenewLeasesAll), renewLeasesAll)
}

// NewTransactionUpdate mocks base method.
func (m *MockTransactionClient) NewTransactionUpdate(update *types.MsgUpdate) bluzelledbgo.TransactionOperation {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewTransactionUpdate", update)
	ret0, _ := ret[0].(bluzelledbgo.TransactionOperation)
	return ret0
}

// NewTransactionUpdate indicates an expected call of NewTransactionUpdate.
func (mr *MockTransactionClientMockRecorder) NewTransactionUpdate(update interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewTransactionUpdate", reflect.TypeOf((*MockTransactionClient)(nil).NewTransactionUpdate), update)
}

// NewTransactionUpsert mocks base method.
func (m *MockTransactionClient) NewTransactionUpsert(update *types.MsgUpsert) bluzelledbgo.TransactionOperation {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewTransactionUpsert", update)
	ret0, _ := ret[0].(bluzelledbgo.TransactionOperation)
	return ret0
}

// NewTransactionUpsert indicates an expected call of NewTransactionUpsert.
func (mr *MockTransactionClientMockRecorder) NewTransactionUpsert(update interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewTransactionUpsert", reflect.TypeOf((*MockTransactionClient)(nil).NewTransactionUpsert), update)
}

// Rename mocks base method.
func (m *MockTransactionClient) Rename(ctx context.Context, rename *types.MsgRename) (*types.MsgRenameResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rename", ctx, rename)
	ret0, _ := ret[0].(*types.MsgRenameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Rename indicates an expected call of Rename.
func (mr *MockTransactionClientMockRecorder) Rename(ctx, rename interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rename", reflect.TypeOf((*MockTransactionClient)(nil).Rename), ctx, rename)
}

// RenewLease mocks base method.
func (m *MockTransactionClient) RenewLease(ctx context.Context, renewLease *types.MsgRenewLease) (*types.MsgRenewLeaseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenewLease", ctx, renewLease)
	ret0, _ := ret[0].(*types.MsgRenewLeaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenewLease indicates an expected call of RenewLease.
func (mr *MockTransactionClientMockRecorder) RenewLease(ctx, renewLease interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenewLease", reflect.TypeOf((*MockTransactionClient)(nil).RenewLease), ctx, renewLease)
}

// RenewLeasesAll mocks base method.
func (m *MockTransactionClient) RenewLeasesAll(ctx context.Context, renewLeasesAll *types.MsgRenewLeasesAll) (*types.MsgRenewLeasesAllResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenewLeasesAll", ctx, renewLeasesAll)
	ret0, _ := ret[0].(*types.MsgRenewLeasesAllResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenewLeasesAll indicates an expected call of RenewLeasesAll.
func (mr *MockTransactionClientMockRecorder) RenewLeasesAll(ctx, renewLeasesAll interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenewLeasesAll", reflect.TypeOf((*MockTransactionClient)(nil).RenewLeasesAll), ctx, renewLeasesAll)
}

// Update mocks base method.
func (m *MockTransactionClient) Update(ctx context.Context, update *types.MsgUpdate) (*types.MsgUpdateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, update)
	ret0, _ := ret[0].(*types.MsgUpdateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockTransactionClientMockRecorder) Update(ctx, update interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTransactionClient)(nil).Update), ctx, update)
}

// Upsert mocks base method.
func (m *MockTransactionClient) Upsert(ctx context.Context, upsert *types.MsgUpsert) (*types.MsgUpsertResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", ctx, upsert)
	ret0, _ := ret[0].(*types.MsgUpsertResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upsert indicates an expected call of Upsert.
func (mr *MockTransactionClientMockRecorder) Upsert(ctx, upsert interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockTransactionClient)(nil).Upsert), ctx, upsert)
}
