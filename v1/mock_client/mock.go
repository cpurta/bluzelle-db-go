// Code generated by MockGen. DO NOT EDIT.
// Source: ./client.go

// Package mock_bluzelledbgo is a generated GoMock package.
package mock_bluzelledbgo

import (
	reflect "reflect"

	types "github.com/cpurta/bluzelle-db-go/codec/github.com/bluzelle/curium/x/crud/types"
	v1 "github.com/cpurta/bluzelle-db-go/v1"
	gomock "github.com/golang/mock/gomock"
)

// MockBluezelleClient is a mock of BluezelleClient interface.
type MockBluezelleClient struct {
	ctrl     *gomock.Controller
	recorder *MockBluezelleClientMockRecorder
}

// MockBluezelleClientMockRecorder is the mock recorder for MockBluezelleClient.
type MockBluezelleClientMockRecorder struct {
	mock *MockBluezelleClient
}

// NewMockBluezelleClient creates a new mock instance.
func NewMockBluezelleClient(ctrl *gomock.Controller) *MockBluezelleClient {
	mock := &MockBluezelleClient{ctrl: ctrl}
	mock.recorder = &MockBluezelleClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBluezelleClient) EXPECT() *MockBluezelleClientMockRecorder {
	return m.recorder
}

// Query mocks base method.
func (m *MockBluezelleClient) Query() v1.Querier {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query")
	ret0, _ := ret[0].(v1.Querier)
	return ret0
}

// Query indicates an expected call of Query.
func (mr *MockBluezelleClientMockRecorder) Query() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockBluezelleClient)(nil).Query))
}

// Transaction mocks base method.
func (m *MockBluezelleClient) Transaction() v1.Transactioner {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transaction")
	ret0, _ := ret[0].(v1.Transactioner)
	return ret0
}

// Transaction indicates an expected call of Transaction.
func (mr *MockBluezelleClientMockRecorder) Transaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transaction", reflect.TypeOf((*MockBluezelleClient)(nil).Transaction))
}

// MockQuerier is a mock of Querier interface.
type MockQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockQuerierMockRecorder
}

// MockQuerierMockRecorder is the mock recorder for MockQuerier.
type MockQuerierMockRecorder struct {
	mock *MockQuerier
}

// NewMockQuerier creates a new mock instance.
func NewMockQuerier(ctrl *gomock.Controller) *MockQuerier {
	mock := &MockQuerier{ctrl: ctrl}
	mock.recorder = &MockQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuerier) EXPECT() *MockQuerierMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockQuerier) Count(arg0 types.QueryCountRequest) types.QueryCountResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", arg0)
	ret0, _ := ret[0].(types.QueryCountResponse)
	return ret0
}

// Count indicates an expected call of Count.
func (mr *MockQuerierMockRecorder) Count(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockQuerier)(nil).Count), arg0)
}

// File mocks base method.
func (m *MockQuerier) File(arg0 types.QueryFileRequest) types.QueryFileResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "File", arg0)
	ret0, _ := ret[0].(types.QueryFileResponse)
	return ret0
}

// File indicates an expected call of File.
func (mr *MockQuerierMockRecorder) File(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "File", reflect.TypeOf((*MockQuerier)(nil).File), arg0)
}

// GetLease mocks base method.
func (m *MockQuerier) GetLease(arg0 types.QueryGetLeaseRequest) types.QueryGetLeaseResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLease", arg0)
	ret0, _ := ret[0].(types.QueryGetLeaseResponse)
	return ret0
}

// GetLease indicates an expected call of GetLease.
func (mr *MockQuerierMockRecorder) GetLease(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLease", reflect.TypeOf((*MockQuerier)(nil).GetLease), arg0)
}

// GetNShortestLeases mocks base method.
func (m *MockQuerier) GetNShortestLeases(arg0 types.QueryGetNShortestLeasesRequest) types.QueryGetNShortestLeasesResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNShortestLeases", arg0)
	ret0, _ := ret[0].(types.QueryGetNShortestLeasesResponse)
	return ret0
}

// GetNShortestLeases indicates an expected call of GetNShortestLeases.
func (mr *MockQuerierMockRecorder) GetNShortestLeases(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNShortestLeases", reflect.TypeOf((*MockQuerier)(nil).GetNShortestLeases), arg0)
}

// Has mocks base method.
func (m *MockQuerier) Has(arg0 types.QueryHasRequest) types.QueryHasResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", arg0)
	ret0, _ := ret[0].(types.QueryHasResponse)
	return ret0
}

// Has indicates an expected call of Has.
func (mr *MockQuerierMockRecorder) Has(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockQuerier)(nil).Has), arg0)
}

// KeyValues mocks base method.
func (m *MockQuerier) KeyValues(arg0 types.QueryKeyValuesRequest) types.QueryKeyValuesResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KeyValues", arg0)
	ret0, _ := ret[0].(types.QueryKeyValuesResponse)
	return ret0
}

// KeyValues indicates an expected call of KeyValues.
func (mr *MockQuerierMockRecorder) KeyValues(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeyValues", reflect.TypeOf((*MockQuerier)(nil).KeyValues), arg0)
}

// Keys mocks base method.
func (m *MockQuerier) Keys(arg0 types.QueryKeysRequest) types.QueryKeysResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Keys", arg0)
	ret0, _ := ret[0].(types.QueryKeysResponse)
	return ret0
}

// Keys indicates an expected call of Keys.
func (mr *MockQuerierMockRecorder) Keys(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockQuerier)(nil).Keys), arg0)
}

// MyKeys mocks base method.
func (m *MockQuerier) MyKeys(arg0 types.QueryMyKeysRequest) types.QueryMyKeysResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MyKeys", arg0)
	ret0, _ := ret[0].(types.QueryMyKeysResponse)
	return ret0
}

// MyKeys indicates an expected call of MyKeys.
func (mr *MockQuerierMockRecorder) MyKeys(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MyKeys", reflect.TypeOf((*MockQuerier)(nil).MyKeys), arg0)
}

// Read mocks base method.
func (m *MockQuerier) Read(arg0 types.QueryReadRequest) types.QueryReadResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0)
	ret0, _ := ret[0].(types.QueryReadResponse)
	return ret0
}

// Read indicates an expected call of Read.
func (mr *MockQuerierMockRecorder) Read(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockQuerier)(nil).Read), arg0)
}

// Search mocks base method.
func (m *MockQuerier) Search(arg0 types.QuerySearchRequest) types.QuerySearchResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", arg0)
	ret0, _ := ret[0].(types.QuerySearchResponse)
	return ret0
}

// Search indicates an expected call of Search.
func (mr *MockQuerierMockRecorder) Search(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockQuerier)(nil).Search), arg0)
}

// MockTransactioner is a mock of Transactioner interface.
type MockTransactioner struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionerMockRecorder
}

// MockTransactionerMockRecorder is the mock recorder for MockTransactioner.
type MockTransactionerMockRecorder struct {
	mock *MockTransactioner
}

// NewMockTransactioner creates a new mock instance.
func NewMockTransactioner(ctrl *gomock.Controller) *MockTransactioner {
	mock := &MockTransactioner{ctrl: ctrl}
	mock.recorder = &MockTransactionerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactioner) EXPECT() *MockTransactionerMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockTransactioner) Count(arg0 types.MsgCount) types.MsgCountResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", arg0)
	ret0, _ := ret[0].(types.MsgCountResponse)
	return ret0
}

// Count indicates an expected call of Count.
func (mr *MockTransactionerMockRecorder) Count(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockTransactioner)(nil).Count), arg0)
}

// Create mocks base method.
func (m *MockTransactioner) Create(arg0 types.MsgCreate) types.MsgCreateResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(types.MsgCreateResponse)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockTransactionerMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTransactioner)(nil).Create), arg0)
}

// Delete mocks base method.
func (m *MockTransactioner) Delete(arg0 types.MsgDelete) types.MsgDeleteResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(types.MsgDeleteResponse)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTransactionerMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTransactioner)(nil).Delete), arg0)
}

// DeleteAll mocks base method.
func (m *MockTransactioner) DeleteAll(arg0 types.MsgDeleteAll) types.MsgDeleteAllResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll", arg0)
	ret0, _ := ret[0].(types.MsgDeleteAllResponse)
	return ret0
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockTransactionerMockRecorder) DeleteAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockTransactioner)(nil).DeleteAll), arg0)
}

// GetLease mocks base method.
func (m *MockTransactioner) GetLease(arg0 types.MsgGetLease) types.MsgGetLeaseResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLease", arg0)
	ret0, _ := ret[0].(types.MsgGetLeaseResponse)
	return ret0
}

// GetLease indicates an expected call of GetLease.
func (mr *MockTransactionerMockRecorder) GetLease(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLease", reflect.TypeOf((*MockTransactioner)(nil).GetLease), arg0)
}

// GetNShortestLeases mocks base method.
func (m *MockTransactioner) GetNShortestLeases(arg0 types.MsgGetNShortestLeases) types.MsgGetNShortestLeasesResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNShortestLeases", arg0)
	ret0, _ := ret[0].(types.MsgGetNShortestLeasesResponse)
	return ret0
}

// GetNShortestLeases indicates an expected call of GetNShortestLeases.
func (mr *MockTransactionerMockRecorder) GetNShortestLeases(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNShortestLeases", reflect.TypeOf((*MockTransactioner)(nil).GetNShortestLeases), arg0)
}

// Has mocks base method.
func (m *MockTransactioner) Has(arg0 types.MsgHas) types.MsgHasResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", arg0)
	ret0, _ := ret[0].(types.MsgHasResponse)
	return ret0
}

// Has indicates an expected call of Has.
func (mr *MockTransactionerMockRecorder) Has(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockTransactioner)(nil).Has), arg0)
}

// KeyValues mocks base method.
func (m *MockTransactioner) KeyValues(arg0 types.MsgKeyValues) types.MsgKeyValuesResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KeyValues", arg0)
	ret0, _ := ret[0].(types.MsgKeyValuesResponse)
	return ret0
}

// KeyValues indicates an expected call of KeyValues.
func (mr *MockTransactionerMockRecorder) KeyValues(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeyValues", reflect.TypeOf((*MockTransactioner)(nil).KeyValues), arg0)
}

// Keys mocks base method.
func (m *MockTransactioner) Keys(arg0 types.MsgKeys) types.MsgKeysResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Keys", arg0)
	ret0, _ := ret[0].(types.MsgKeysResponse)
	return ret0
}

// Keys indicates an expected call of Keys.
func (mr *MockTransactionerMockRecorder) Keys(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockTransactioner)(nil).Keys), arg0)
}

// MultiUpdate mocks base method.
func (m *MockTransactioner) MultiUpdate(arg0 types.MsgMultiUpdate) types.MsgMultiUpdateResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MultiUpdate", arg0)
	ret0, _ := ret[0].(types.MsgMultiUpdateResponse)
	return ret0
}

// MultiUpdate indicates an expected call of MultiUpdate.
func (mr *MockTransactionerMockRecorder) MultiUpdate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultiUpdate", reflect.TypeOf((*MockTransactioner)(nil).MultiUpdate), arg0)
}

// Read mocks base method.
func (m *MockTransactioner) Read(arg0 types.MsgRead) types.MsgReadResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0)
	ret0, _ := ret[0].(types.MsgReadResponse)
	return ret0
}

// Read indicates an expected call of Read.
func (mr *MockTransactionerMockRecorder) Read(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockTransactioner)(nil).Read), arg0)
}

// Rename mocks base method.
func (m *MockTransactioner) Rename(arg0 types.MsgRename) types.MsgRenameResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rename", arg0)
	ret0, _ := ret[0].(types.MsgRenameResponse)
	return ret0
}

// Rename indicates an expected call of Rename.
func (mr *MockTransactionerMockRecorder) Rename(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rename", reflect.TypeOf((*MockTransactioner)(nil).Rename), arg0)
}

// RenewLease mocks base method.
func (m *MockTransactioner) RenewLease(arg0 types.MsgRenewLease) types.MsgRenewLeaseResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenewLease", arg0)
	ret0, _ := ret[0].(types.MsgRenewLeaseResponse)
	return ret0
}

// RenewLease indicates an expected call of RenewLease.
func (mr *MockTransactionerMockRecorder) RenewLease(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenewLease", reflect.TypeOf((*MockTransactioner)(nil).RenewLease), arg0)
}

// RenewLeasesAll mocks base method.
func (m *MockTransactioner) RenewLeasesAll(arg0 types.MsgRenewLeasesAll) types.MsgRenewLeasesAllResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenewLeasesAll", arg0)
	ret0, _ := ret[0].(types.MsgRenewLeasesAllResponse)
	return ret0
}

// RenewLeasesAll indicates an expected call of RenewLeasesAll.
func (mr *MockTransactionerMockRecorder) RenewLeasesAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenewLeasesAll", reflect.TypeOf((*MockTransactioner)(nil).RenewLeasesAll), arg0)
}

// Update mocks base method.
func (m *MockTransactioner) Update(arg0 types.MsgUpdate) types.MsgUpdateResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(types.MsgUpdateResponse)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockTransactionerMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTransactioner)(nil).Update), arg0)
}

// Upsert mocks base method.
func (m *MockTransactioner) Upsert(arg0 types.MsgUpsert) types.MsgUpsertResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", arg0)
	ret0, _ := ret[0].(types.MsgUpsertResponse)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockTransactionerMockRecorder) Upsert(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockTransactioner)(nil).Upsert), arg0)
}
