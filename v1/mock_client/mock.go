// Code generated by MockGen. DO NOT EDIT.
// Source: ./client.go

// Package mock_bluzelledbgo is a generated GoMock package.
package mock_bluzelledbgo

import (
	reflect "reflect"

	bluzelledbgo "github.com/cpurta/bluzelle-db-go/v1"
	gomock "github.com/golang/mock/gomock"
)

// MockBluezelleClient is a mock of BluezelleClient interface.
type MockBluezelleClient struct {
	ctrl     *gomock.Controller
	recorder *MockBluezelleClientMockRecorder
}

// MockBluezelleClientMockRecorder is the mock recorder for MockBluezelleClient.
type MockBluezelleClientMockRecorder struct {
	mock *MockBluezelleClient
}

// NewMockBluezelleClient creates a new mock instance.
func NewMockBluezelleClient(ctrl *gomock.Controller) *MockBluezelleClient {
	mock := &MockBluezelleClient{ctrl: ctrl}
	mock.recorder = &MockBluezelleClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBluezelleClient) EXPECT() *MockBluezelleClientMockRecorder {
	return m.recorder
}

// Query mocks base method.
func (m *MockBluezelleClient) Query() bluzelledbgo.QueryClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query")
	ret0, _ := ret[0].(bluzelledbgo.QueryClient)
	return ret0
}

// Query indicates an expected call of Query.
func (mr *MockBluezelleClientMockRecorder) Query() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockBluezelleClient)(nil).Query))
}

// Transaction mocks base method.
func (m *MockBluezelleClient) Transaction() bluzelledbgo.TransactionClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transaction")
	ret0, _ := ret[0].(bluzelledbgo.TransactionClient)
	return ret0
}

// Transaction indicates an expected call of Transaction.
func (mr *MockBluezelleClientMockRecorder) Transaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transaction", reflect.TypeOf((*MockBluezelleClient)(nil).Transaction))
}
