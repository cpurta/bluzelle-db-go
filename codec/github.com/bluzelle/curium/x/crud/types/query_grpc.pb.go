// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package types

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// this line is used by starport scaffolding # 2
	Read(ctx context.Context, in *QueryReadRequest, opts ...grpc.CallOption) (*QueryReadResponse, error)
	Keys(ctx context.Context, in *QueryKeysRequest, opts ...grpc.CallOption) (*QueryKeysResponse, error)
	MyKeys(ctx context.Context, in *QueryMyKeysRequest, opts ...grpc.CallOption) (*QueryMyKeysResponse, error)
	Count(ctx context.Context, in *QueryCountRequest, opts ...grpc.CallOption) (*QueryCountResponse, error)
	Has(ctx context.Context, in *QueryHasRequest, opts ...grpc.CallOption) (*QueryHasResponse, error)
	Search(ctx context.Context, in *QuerySearchRequest, opts ...grpc.CallOption) (*QuerySearchResponse, error)
	GetNShortestLeases(ctx context.Context, in *QueryGetNShortestLeasesRequest, opts ...grpc.CallOption) (*QueryGetNShortestLeasesResponse, error)
	GetLease(ctx context.Context, in *QueryGetLeaseRequest, opts ...grpc.CallOption) (*QueryGetLeaseResponse, error)
	KeyValues(ctx context.Context, in *QueryKeyValuesRequest, opts ...grpc.CallOption) (*QueryKeyValuesResponse, error)
	File(ctx context.Context, in *QueryFileRequest, opts ...grpc.CallOption) (*QueryFileResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Read(ctx context.Context, in *QueryReadRequest, opts ...grpc.CallOption) (*QueryReadResponse, error) {
	out := new(QueryReadResponse)
	err := c.cc.Invoke(ctx, "/bluzelle.curium.crud.Query/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Keys(ctx context.Context, in *QueryKeysRequest, opts ...grpc.CallOption) (*QueryKeysResponse, error) {
	out := new(QueryKeysResponse)
	err := c.cc.Invoke(ctx, "/bluzelle.curium.crud.Query/Keys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MyKeys(ctx context.Context, in *QueryMyKeysRequest, opts ...grpc.CallOption) (*QueryMyKeysResponse, error) {
	out := new(QueryMyKeysResponse)
	err := c.cc.Invoke(ctx, "/bluzelle.curium.crud.Query/MyKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Count(ctx context.Context, in *QueryCountRequest, opts ...grpc.CallOption) (*QueryCountResponse, error) {
	out := new(QueryCountResponse)
	err := c.cc.Invoke(ctx, "/bluzelle.curium.crud.Query/Count", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Has(ctx context.Context, in *QueryHasRequest, opts ...grpc.CallOption) (*QueryHasResponse, error) {
	out := new(QueryHasResponse)
	err := c.cc.Invoke(ctx, "/bluzelle.curium.crud.Query/Has", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Search(ctx context.Context, in *QuerySearchRequest, opts ...grpc.CallOption) (*QuerySearchResponse, error) {
	out := new(QuerySearchResponse)
	err := c.cc.Invoke(ctx, "/bluzelle.curium.crud.Query/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetNShortestLeases(ctx context.Context, in *QueryGetNShortestLeasesRequest, opts ...grpc.CallOption) (*QueryGetNShortestLeasesResponse, error) {
	out := new(QueryGetNShortestLeasesResponse)
	err := c.cc.Invoke(ctx, "/bluzelle.curium.crud.Query/GetNShortestLeases", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetLease(ctx context.Context, in *QueryGetLeaseRequest, opts ...grpc.CallOption) (*QueryGetLeaseResponse, error) {
	out := new(QueryGetLeaseResponse)
	err := c.cc.Invoke(ctx, "/bluzelle.curium.crud.Query/GetLease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) KeyValues(ctx context.Context, in *QueryKeyValuesRequest, opts ...grpc.CallOption) (*QueryKeyValuesResponse, error) {
	out := new(QueryKeyValuesResponse)
	err := c.cc.Invoke(ctx, "/bluzelle.curium.crud.Query/KeyValues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) File(ctx context.Context, in *QueryFileRequest, opts ...grpc.CallOption) (*QueryFileResponse, error) {
	out := new(QueryFileResponse)
	err := c.cc.Invoke(ctx, "/bluzelle.curium.crud.Query/File", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// this line is used by starport scaffolding # 2
	Read(context.Context, *QueryReadRequest) (*QueryReadResponse, error)
	Keys(context.Context, *QueryKeysRequest) (*QueryKeysResponse, error)
	MyKeys(context.Context, *QueryMyKeysRequest) (*QueryMyKeysResponse, error)
	Count(context.Context, *QueryCountRequest) (*QueryCountResponse, error)
	Has(context.Context, *QueryHasRequest) (*QueryHasResponse, error)
	Search(context.Context, *QuerySearchRequest) (*QuerySearchResponse, error)
	GetNShortestLeases(context.Context, *QueryGetNShortestLeasesRequest) (*QueryGetNShortestLeasesResponse, error)
	GetLease(context.Context, *QueryGetLeaseRequest) (*QueryGetLeaseResponse, error)
	KeyValues(context.Context, *QueryKeyValuesRequest) (*QueryKeyValuesResponse, error)
	File(context.Context, *QueryFileRequest) (*QueryFileResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) Read(context.Context, *QueryReadRequest) (*QueryReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedQueryServer) Keys(context.Context, *QueryKeysRequest) (*QueryKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Keys not implemented")
}
func (UnimplementedQueryServer) MyKeys(context.Context, *QueryMyKeysRequest) (*QueryMyKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MyKeys not implemented")
}
func (UnimplementedQueryServer) Count(context.Context, *QueryCountRequest) (*QueryCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Count not implemented")
}
func (UnimplementedQueryServer) Has(context.Context, *QueryHasRequest) (*QueryHasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Has not implemented")
}
func (UnimplementedQueryServer) Search(context.Context, *QuerySearchRequest) (*QuerySearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedQueryServer) GetNShortestLeases(context.Context, *QueryGetNShortestLeasesRequest) (*QueryGetNShortestLeasesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNShortestLeases not implemented")
}
func (UnimplementedQueryServer) GetLease(context.Context, *QueryGetLeaseRequest) (*QueryGetLeaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLease not implemented")
}
func (UnimplementedQueryServer) KeyValues(context.Context, *QueryKeyValuesRequest) (*QueryKeyValuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KeyValues not implemented")
}
func (UnimplementedQueryServer) File(context.Context, *QueryFileRequest) (*QueryFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method File not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bluzelle.curium.crud.Query/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Read(ctx, req.(*QueryReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Keys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Keys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bluzelle.curium.crud.Query/Keys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Keys(ctx, req.(*QueryKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MyKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMyKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MyKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bluzelle.curium.crud.Query/MyKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MyKeys(ctx, req.(*QueryMyKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Count_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Count(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bluzelle.curium.crud.Query/Count",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Count(ctx, req.(*QueryCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Has_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Has(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bluzelle.curium.crud.Query/Has",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Has(ctx, req.(*QueryHasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bluzelle.curium.crud.Query/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Search(ctx, req.(*QuerySearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetNShortestLeases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetNShortestLeasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetNShortestLeases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bluzelle.curium.crud.Query/GetNShortestLeases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetNShortestLeases(ctx, req.(*QueryGetNShortestLeasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetLease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetLeaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetLease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bluzelle.curium.crud.Query/GetLease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetLease(ctx, req.(*QueryGetLeaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_KeyValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryKeyValuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).KeyValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bluzelle.curium.crud.Query/KeyValues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).KeyValues(ctx, req.(*QueryKeyValuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_File_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).File(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bluzelle.curium.crud.Query/File",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).File(ctx, req.(*QueryFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bluzelle.curium.crud.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Read",
			Handler:    _Query_Read_Handler,
		},
		{
			MethodName: "Keys",
			Handler:    _Query_Keys_Handler,
		},
		{
			MethodName: "MyKeys",
			Handler:    _Query_MyKeys_Handler,
		},
		{
			MethodName: "Count",
			Handler:    _Query_Count_Handler,
		},
		{
			MethodName: "Has",
			Handler:    _Query_Has_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _Query_Search_Handler,
		},
		{
			MethodName: "GetNShortestLeases",
			Handler:    _Query_GetNShortestLeases_Handler,
		},
		{
			MethodName: "GetLease",
			Handler:    _Query_GetLease_Handler,
		},
		{
			MethodName: "KeyValues",
			Handler:    _Query_KeyValues_Handler,
		},
		{
			MethodName: "File",
			Handler:    _Query_File_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "crud/query.proto",
}
